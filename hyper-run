#!/usr/bin/env php
<?php

if (PHP_SAPI !== 'cli') {
    header('Content-Type: text/plain; charset=UTF-8', true, 400);
    exit("This script only works on php-cli.\n");
}

if (is_file(__DIR__ . '/autoload.php')) {
    require __DIR__ . '/autoload.php';
} elseif (is_file(__DIR__ . '/../../autoload.php')) {
    require __DIR__ . '/../../autoload.php';
} elseif (is_file(__DIR__ . '/vendor/autoload.php')) {
    require __DIR__ . '/vendor/autoload.php';
} else {
    fwrite(STDERR,
        "You need to set up the project dependencies using the following commands:\n" .
        "curl -s http://getcomposer.org/installer | php\n" .
        "php composer.phar install\n"
    );
    exit(1);
}

function usage()
{
    $cert = __DIR__ . '/certificate.pem';
    fwrite(STDERR,
"
Usage:
    $_SERVER[SCRIPT_NAME] <options>

Example:
    $_SERVER[SCRIPT_NAME] -S localhost:8080 -s localhost:8081

[Required]
    -S   \"<Host>:<Port>\" of an HTTP server. Multiple arguments can be accepted.
    -s   \"<Host>:<Port>\" of an HTTPS server. Multiple arguments can be accepted.

[Optional]
    -n   The number of PHP built-in server clusters, from 1 to 20. Default is 10.
    -t   Path for the document root. Default is the current directory.
    -r   Path for the router script. Default is empty.
    -c   Path for the PEM-encoded certificate.
         Default is \"$cert\".
    -p   Path for the PHP binary executable. Default is PHP_BINARY.

Restriction:
    - The option -s is only supported on PHP 5.6.0 or later.
    - Access logs will not be displayed on Windows.

"
    );
}

$options = getopt('S:s:n:t:r:c:p:h');

$help    = isset($options['h']);
$servers = isset($options['S']) ? (array)$options['S'] : [];
$secures = isset($options['s']) ? (array)$options['s'] : [];
$docroot = isset($options['t']) ? current((array)$options['t']) : null;
$number  = isset($options['n']) ? current((array)$options['n']) : '10';
$router  = isset($options['r']) ? current((array)$options['r']) : null;
$cert    = isset($options['c']) ? current((array)$options['c']) : (__DIR__ . '/certificate.pem');
$php     = isset($options['p']) ? current((array)$options['p']) : PHP_BINARY;

if ($help) {
    usage();
    exit(0);
}

if (!$servers && !$secures) {
    fwrite(STDERR, "Error: At least 1 server must be specified.\n");
    usage();
    exit(1);
}

try {

    if (!ctype_digit($number) || $number < 1 || $number > 20) {
        throw new \RuntimeException('The number of clusters must be between 1 and 20.');
    }
    if ($docroot !== null && !is_dir($docroot)) {
        throw new \RuntimeException("No such document root directory: $docroot");
    }
    if ($router !== null && !is_file($router)) {
        throw new \RuntimeException("No such router script file: $router");
    }
    if (!is_file($cert)) {
        throw new \RuntimeException("No such certificate file: $cert");
    }
    if (!openssl_pkey_get_public("file://$cert")) {
        throw new \RuntimeException("Invalid certificate file: $cert");
    }

    $listeners = [];
    foreach ([$servers, $secures] as $type => $group) {
        foreach ($group as $i => $server) {
            list($host, $port) = explode(':', $server, 2) + [1 => ''];
            $ip = filter_var(gethostbyname($host), FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);
            $regex = '/\A(?:[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])\z/';
            if ($ip === false || !preg_match($regex, $port)) {
                throw new \RuntimeException("Invalid host or port: $server");
            }
            if (isset($listeners[$server])) {
                throw new \RuntimeException("Duplicated entry: $server");
            }
            $listeners[$server] = [$host, $port, $type === 1, $cert];
        }
    }

    $loop = React\EventLoop\Factory::create();

    $used_processes = [];
    $factory = new mpyw\HyperBuiltinServer\BuiltinServerFactory($loop, 5, $php);
    $factory
    ->createMultipleAsync($number, '127.0.0.1', $docroot, $router)
    ->then(function (array $processes) use ($loop, $listeners, &$used_processes) {
        $used_processes = $processes;
        $master = new mpyw\HyperBuiltinServer\Master($loop, $processes);
        foreach ($listeners as $listener) {
            call_user_func_array([$master, 'addListener'], $listener);
        }
    })
    ->then(null, function ($e) use (&$used_processes) {
        foreach ($used_processes as $process) {
            $process->terminate();
        }
        throw $e;
    })
    ->done();

    set_time_limit(0);
    $loop->run();

} catch (\Throwable $e) {

    fwrite(STDERR, "Error: {$e->getMessage()}\n");
    exit(1);

} catch (\Exception $e) {

    fwrite(STDERR, "Error: {$e->getMessage()}\n");
    exit(1);

}
